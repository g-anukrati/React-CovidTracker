{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","toLocaleDateString","borderColor","fill","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","setState","this","image","src","alt","CountryPicker","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3402b45.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1fW7N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2Mdq1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__NY4_9\",\"card\":\"Cards_card__2VdtW\",\"infected\":\"Cards_infected___QsbE\",\"recovered\":\"Cards_recovered__fLhQ6\",\"deaths\":\"Cards_deaths__2K8S7\"};","import React from 'react'\r\nimport styles from './Cards.module.css'\r\nimport {Card,CardContent, Typography,Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data: {confirmed, recovered,deaths, lastUpdate}}) => {\r\n    if (!confirmed){\r\n        return 'Loading....'\r\n    }\r\n    return (\r\n        <div className= {styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component = {Card} xs={12} md= {3} className = {cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color= \"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant = \"h5\">\r\n                            <CountUp\r\n                                start ={0}\r\n                                end = {confirmed.value}\r\n                                duration = {2.5}\r\n                                separator = ','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant = \"body2\" >Number of Active Cases of Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component = {Card} xs={12} md= {3} className = {cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color= \"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant = \"h5\">\r\n                            <CountUp\r\n                                start ={0}\r\n                                end = {recovered.value}\r\n                                duration = {2.5}\r\n                                separator = ','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant = \"body2\" >Number of Recovered Cases of Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component = {Card} xs={12} md= {3} className = {cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color= \"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant = \"h5\">\r\n                            <CountUp\r\n                                start ={0}\r\n                                end = {deaths.value}\r\n                                duration = {2.5}\r\n                                separator = ','\r\n                            />\r\n                        </Typography>\r\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant = \"body2\" >Number of Death Cases of Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n export const fetchDailyData = async () => {\r\n   try {\r\n     const { data } = await axios.get(`${url}/daily`);\r\n\r\n     return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n   } catch (error) {\r\n     return error;\r\n   }\r\n };\r\n\r\n// Instead of Global, it fetches the daily data for the US\r\n// export const fetchDailyData = async () => {\r\n//     try {\r\n//       const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\r\n  \r\n//       return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\r\n//     } catch (error) {\r\n//       return error;\r\n//     }\r\n//   };\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },  {\r\n            data: dailyData.map((data) => data.recovered),\r\n            label: 'Recovered',\r\n            borderColor: 'green',\r\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;","export default __webpack_public_path__ + \"static/media/image.8e7c5714.png\";","import React from 'react';\r\n\r\nimport { Cards, CountryPicker, Chart } from './components';\r\nimport { fetchData } from './api/';\r\nimport styles from './App.module.css';\r\n\r\nimport image from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const data = await fetchData();\r\n\r\n    this.setState({ data });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const data = await fetchData(country);\r\n\r\n    this.setState({ data, country: country });\r\n  }\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={image} alt=\"COVID-19\" />\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom'; \r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__35KAx\",\"image\":\"App_image__3SJa5\"};"],"sourceRoot":""}